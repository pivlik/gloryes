{"version":3,"sources":["app/construction-progress.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","define","$","tplSelect","tplGallery","Gallery","ConstructionProgress","$wrap","this","$wrapSelects","find","$selects","$content","$gallery","$form","$ajaxLoader","objectId","val","bindEvents","value","on","send","bind","that","ajax","url","attr","type","data","serialize","dataType","beforeSend","show","success","createSelect","selects","progressBar","createText","text","createGallery","gallery","changeLink","hide","counter","empty","each","index","html","eq","append","select","prop","selectric","undefined","initGallery","$progressWrap","$progressBase","$progressDone","$progressLine","$progressText","$progressDeadline","css","dataUrl","index2","value2","isSelect","parseUrl","decodeURIComponent","param","window","history","pushState"],"mappings":"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","file":"../../app/construction-progress.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\ndefine('app/construction-progress', ['jquery', 'app/tpl/construction-progress/select', 'app/tpl/construction-progress/gallery', 'app/gallery'], function ($, tplSelect, tplGallery, Gallery) {\n    /**\n     * Блок \"Ход строительства\"\n     * @param {Object} $wrap - jQuery object - обертка всего блока\n     * @constructor\n     */\n    var ConstructionProgress = function () {\n        function ConstructionProgress($wrap) {\n            _classCallCheck(this, ConstructionProgress);\n\n            // Обёртка селекта\n            this.$wrapSelects = $wrap.find('.b-construction-progress__select');\n            // Все селекты блока\n            this.$selects = $wrap.find('select');\n            // Контентная часть блока\n            this.$content = $wrap.find('.b-construction-progress__content');\n            // Галерея\n            this.$gallery = $wrap.find('.b-construction-progress__gallery');\n            // Форма <form>\n            this.$form = $wrap.find('form');\n            // Разметка ajax loader\n            this.$ajaxLoader = $('.b-ajax-loader');\n            //id объекта ЖК\n            this.objectId = this.$form.find('input[name=object_id]').val();\n\n            this.bindEvents();\n        }\n\n        /**\n         * События\n         */\n\n\n        _createClass(ConstructionProgress, [{\n            key: 'bindEvents',\n            value: function bindEvents() {\n                // При изменения в селекте отсылаем запрос на сервер\n                this.$selects.on('change', this.send.bind(this));\n            }\n        }, {\n            key: 'send',\n\n\n            /**\n             * Получение данных от сервера\n             */\n            value: function send() {\n                var that = this;\n\n                $.ajax({\n                    url: this.$form.attr('action'),\n                    type: this.$form.attr('method') || 'post',\n                    data: this.$form.serialize(),\n                    dataType: 'json',\n                    beforeSend: function beforeSend() {\n                        that.$ajaxLoader.show();\n                    },\n                    success: function success(data) {\n                        that.createSelect(data.selects);\n                        that.progressBar(data.progressBar);\n                        that.createText(data.text);\n                        that.createGallery(data.gallery);\n                        that.changeLink(data.selects);\n                        that.$ajaxLoader.hide();\n                    }\n                });\n            }\n        }, {\n            key: 'createSelect',\n\n\n            /**\n             * Пересборка всех селектов\n             * @param {Object} data - json данные всех селектов с сервера\n             */\n            value: function createSelect(data) {\n                var that = this;\n                var counter = 0;\n                this.$wrapSelects.empty();\n\n                $.each(data, function (index, val) {\n                    var html = tplSelect(val);\n                    that.$wrapSelects.eq(counter).append(html);\n                    var select = that.$wrapSelects.eq(counter).find('select');\n                    select.on('change');\n                    select.prop('name', index).on('change', that.send.bind(that)).selectric('init');\n                    counter++;\n                });\n            }\n        }, {\n            key: 'createText',\n\n\n            /**\n             * Создание текста\n             * @param {Object} data - json данные текста с сервера\n             */\n            value: function createText(data) {\n                this.$content.empty().append(data);\n            }\n        }, {\n            key: 'createGallery',\n\n\n            /**\n             * Создание галереи\n             * @param {Object} data - json данные галереи с сервера\n             */\n            value: function createGallery(data) {\n                if (data === undefined) {\n                    this.$gallery.empty().append('&nbsp;');\n                } else {\n                    var html = tplGallery(data);\n                    this.$gallery.empty().append(html);\n                    this.initGallery();\n                }\n            }\n        }, {\n            key: 'progressBar',\n\n\n            /**\n             * Прогресс бар\n             * @param {Object} data - данные о прогресс баре из json\n             */\n            value: function progressBar(data) {\n                if (!data) {\n                    return;\n                }\n\n                var $progressWrap = $('.b-progress-bar');\n                var $progressBase = $progressWrap.find('.b-progress-bar__base');\n                var $progressDone = $progressWrap.find('.b-progress-bar__done');\n                var $progressLine = $progressWrap.find('.b-progress-bar__current');\n                var $progressText = $progressWrap.find('.b-progress-bar__text');\n                var $progressDeadline = $('.b-construction-progress__deadline');\n\n                data['ready_date'] = data['ready_date'] || '';\n\n                if (data['is_ready']) {\n                    $progressDone.show();\n                    $progressBase.hide();\n                    $progressDeadline.hide();\n                } else {\n                    $progressDone.hide();\n                    $progressBase.css('display', 'flex');\n                    $progressDeadline.text(data['ready_date']).show();\n                    $progressText.text(data['progress'] + '%');\n                    $progressLine.css('width', data['progress'] + '%');\n\n                    if (!data['progress']) {\n                        $progressBase.hide();\n                    }\n                }\n            }\n        }, {\n            key: 'initGallery',\n\n\n            /**\n             * Инициализация галереи пришедшей из json\n             * @returns {Object} гарелея\n             */\n            value: function initGallery() {\n                return new Gallery(this.$gallery.find('.b-gallery'));\n            }\n        }, {\n            key: 'changeLink',\n\n\n            /**\n             * Смена url на основе пришедшего json\n             * @param {Object} data - данные\n             */\n            value: function changeLink(data) {\n                // Создаем объект json для урла\n                var dataUrl = {};\n\n                // Собираем объект для урла\n                $.each(data, function (index, val) {\n                    $.each(val, function (index2, value2) {\n                        if (value2.isSelect === true) {\n                            dataUrl[index] = value2.value;\n                        }\n                    });\n                });\n\n                dataUrl['object_id'] = this.objectId;\n                // Превращаем в настоящий url\n                var parseUrl = '?' + decodeURIComponent($.param(dataUrl));\n                window.history.pushState(null, null, parseUrl);\n            }\n        }]);\n\n        return ConstructionProgress;\n    }();\n\n    return ConstructionProgress;\n});"]}