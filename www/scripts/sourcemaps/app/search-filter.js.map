{"version":3,"sources":["app/search-filter.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","define","SearchFilter","$wrap","this","$form","find","$inputs","$submit","$submitColor","css","$reset","$btnClean","timer","$ajaxLoader","clone","addClass","initMask","bindEvents","value","_this","on","updateInputs","bind","filter","off","e","clearTimeout","setTimeout","preventDefault","which","trigger","bindClickSubmit","bindClickReset","cleanInput","send","$","ajax","url","attr","type","dataType","data","serialize","beforeSend","disabledInputs","success","unDisabledInputs","color","append","checkboxes","visible","prop","inputs","j","window","history","pushState","remove","html","count","removeClass","targetPositon","offset","top","animate","scrollTop","removeAttr","each","autoNumeric","aSep","mDec","wEmpty","lZero","val","next","focus","blur","$target","lastVal","prev","rawValue"],"mappings":"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","file":"../../app/search-filter.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\ndefine('app/search-filter', ['autoNumeric'], function () {\n    'use strict';\n\n    var SearchFilter = function () {\n        function SearchFilter($wrap) {\n            _classCallCheck(this, SearchFilter);\n\n            // Форма\n            this.$form = $wrap.find('form');\n            // Все инпуты в фильтре\n            this.$inputs = $wrap.find('input');\n\n            // Кнопка \"Показать результаты\"\n            this.$submit = $wrap.find('.b-search-filter__submit-btn');\n            // Цвет текста кнопки \"Показать результаты\"\n            this.$submitColor = this.$submit.css('color');\n\n            // Кнопка \"Сбросить фильтр\"\n            this.$reset = $wrap.find('.j-search-reset');\n\n            // Крестик \"очистить поле\"\n            this.$btnClean = $wrap.find('.b-search-filter__clear-input');\n            this.timer = null;\n\n            // Ajax разметка для кнопки\n            this.$ajaxLoader = $wrap.find('.b-ajax-loader').clone().addClass('b-ajax-loader_theme_inside is-active');\n\n            this.initMask();\n            this.bindEvents();\n        }\n\n        _createClass(SearchFilter, [{\n            key: 'bindEvents',\n            value: function bindEvents() {\n                var _this = this;\n                var timer = void 0;\n\n                //Отслеживаение изменений в инпутах\n                this.$inputs.on('change', this.updateInputs.bind(this));\n\n                // Отправляем запрос какого-то времени спустя\n                // после последнего нажатия в инпуте\n                this.$inputs.filter('[type=\"text\"]').off('change');\n                this.$inputs.filter('[type=\"text\"]').on('keyup', function (e) {\n                    clearTimeout(timer);\n\n                    timer = setTimeout(function () {\n                        _this.updateInputs(e);\n                    }, 300);\n                });\n\n                // Отправка данных на сервер\n                this.$form.on('submit', function (e) {\n                    e.preventDefault();\n                });\n\n                // Вызов события change при нажатии на enter в инпуте\n                this.$form.on('keypress', function (e) {\n                    if (e.which === 13) {\n                        _this.$inputs.trigger('change');\n                    }\n                });\n\n                // Клик по кнопки отправки формы скролит вниз к результатам\n                this.$submit.on('click', this.bindClickSubmit.bind(this));\n                // Клик по кнопки сброса фильтра\n                this.$reset.on('click', this.bindClickReset.bind(this));\n\n                this.cleanInput();\n            }\n        }, {\n            key: 'updateInputs',\n\n\n            /**\n             * Обновляем инпуты\n             * @param {Event} e - событие\n             */\n            value: function updateInputs(e) {\n                var _this = this;\n                e.preventDefault();\n\n                clearTimeout(this.timer);\n                this.timer = setTimeout(function () {\n                    _this.send();\n                }, 300);\n                //this.send();\n            }\n        }, {\n            key: 'send',\n\n\n            /**\n             * Отправяляем ajax-запрос\n             */\n            value: function send() {\n                var _this = this;\n\n                $.ajax({\n                    url: this.$form.attr('action') + '?getInfo=1',\n                    type: this.$form.attr('method') || 'post',\n                    dataType: 'json',\n                    data: this.$form.serialize(),\n                    beforeSend: function beforeSend() {\n                        _this.disabledInputs();\n                    },\n                    success: function success(data) {\n                        _this.unDisabledInputs(data);\n                    }\n                });\n            }\n        }, {\n            key: 'disabledInputs',\n\n\n            /**\n             * При запросе количества квартир, сначала блокируем все инпуты\n             */\n            value: function disabledInputs() {\n                // Вешаем на кнопку отправки (submit) ajax-loader\n                this.$submit.css({\n                    color: 'transparent'\n                }).append(this.$ajaxLoader).addClass('is-disabled');\n\n                // Выключаем (disabled) все инпуты, что бы во время запроса пользователь\n                // не мог ничего больше поменять\n                // TODO пока отключили \"по просьбе\" Славы\n                // this.$inputs.prop('disabled', true);\n            }\n        }, {\n            key: 'unDisabledInputs',\n\n\n            /**\n             * Показываем нужные инпуты, какие узнаем из пришедшего json\n             * @param {Object} data - даныне о инпутах\n             */\n            value: function unDisabledInputs(data) {\n                var checkboxes = data.visible;\n\n                // Перебираем чекбоекмы, узнаем с каких надо убрать disabled\n                for (var i = checkboxes.length; i--;) {\n                    $('input[name=\"' + checkboxes[i] + '\"]').prop('disabled', false);\n                }\n\n                //TODO ][ардкод для цены и жилой площади\n                var inputs = ['price', 'area'];\n                for (var j = inputs.length; j--;) {\n                    $('input[name=\"' + inputs[j] + '[min]\"]')\n                    //.prop('placeholder', data[inputs[j]].min)\n                    .prop('disabled', false);\n                    $('input[name=\"' + inputs[j] + '[max]\"]')\n                    //.prop('placeholder', data[inputs[j]].max)\n                    .prop('disabled', false);\n                }\n\n                // Добаляем GET в url\n                window.history.pushState(null, null, '?' + this.$form.serialize());\n\n                // Удаляем ajax-loader в кнопке отправки\n                this.$ajaxLoader.remove();\n\n                // Восстанавливаем работу кнопки, добавляем новое количество квартир\n                this.$submit.html(data.count).css({\n                    color: this.$submitColor\n                }).removeClass('is-disabled');\n            }\n        }, {\n            key: 'bindClickSubmit',\n\n\n            /**\n             * Клик по submit скролит нас к результатам\n             */\n            value: function bindClickSubmit() {\n                var targetPositon = $('#search-result').offset().top;\n\n                $('body, html').animate({\n                    scrollTop: targetPositon\n                }, 300);\n            }\n        }, {\n            key: 'bindClickReset',\n\n\n            /**\n             * Обработка клика по кнопке \"Сбросить фильтр\"\n             * @param {Event} e - Event\n             */\n            value: function bindClickReset(e) {\n                e.preventDefault();\n                this.$form.trigger('reset');\n                var _this = this;\n                this.$inputs.removeAttr('checked');\n\n                $.ajax({\n                    url: this.$form.attr('action') + '?getInfo=1',\n                    type: this.$form.attr('method') || 'post',\n                    dataType: 'json',\n                    success: function success(data) {\n                        _this.unDisabledInputs(data);\n                        // Добаляем GET в url\n                        window.history.pushState(null, null, '?');\n                    }\n                });\n            }\n        }, {\n            key: 'initMask',\n\n\n            /**\n             * Маска для разрядов 1 000 000\n             */\n            value: function initMask() {\n                this.$inputs.filter('[type=text]').each(function () {\n                    $(this).autoNumeric('init', {\n                        aSep: ' ',\n                        mDec: 0,\n                        wEmpty: 'empty',\n                        lZero: 'keep'\n                    });\n                });\n            }\n        }, {\n            key: 'cleanInput',\n\n\n            /**\n             * Крестик в инпуте, очищающий инпут\n             */\n            value: function cleanInput() {\n                var _this = this;\n\n                // При загрузке странице, если поле заполненное, то показываем крестик\n                this.$inputs.each(function () {\n                    if ($(this).val().length > 0) {\n                        $(this).next(_this.$btnClean).addClass('is-active');\n                    }\n                });\n\n                this.$inputs.focus(function (e) {\n                    var $target = $(e.target);\n                    $target.next(_this.$btnClean).addClass('is-active');\n                }).blur(function (e) {\n                    var $target = $(e.target);\n\n                    // Если поле заполнено, то не убирать крестик при blur\n                    if ($target.val().length > 0) {\n                        return;\n                    }\n\n                    setTimeout(function () {\n                        $target.next(_this.$btnClean).removeClass('is-active');\n                    }, 300);\n                });\n\n                this.$btnClean.on('click', function (e) {\n                    var $target = $(e.target);\n                    var lastVal = $target.prev('input').val();\n                    $target.prev('input').val('');\n                    $target.prev('input').data('autoNumeric').rawValue = '';\n                    $target.prev('input').focus();\n                    if (lastVal !== '') {\n                        $target.prev('input').trigger('keyup');\n                    }\n                });\n            }\n        }]);\n\n        return SearchFilter;\n    }();\n\n    return SearchFilter;\n});"]}