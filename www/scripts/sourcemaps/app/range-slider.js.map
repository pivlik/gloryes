{"version":3,"sources":["app/range-slider.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","define","RangeSlider","$slider","this","attr","$wrap","isMobile","window","innerWidth","find","$inputs","type","options","initMask","bindEvents","value","_this","data","min","max","from","to","values","min_interval","mathInterval","decorate_both","prettify_enabled","onChange","eventChange","onStart","eventStart","onFinish","setEventInputChange","init","on","e","which","inputsChangesValue","ionRangeSlider","slider","each","index","digit","$","autoNumeric","parseInt","undigit","interval","update","sliderWidth","width","medium","pxInStep","coefficient","Math","floor","stepInPx","number","String","replace","aSep","mDec","change"],"mappings":"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","file":"../../app/range-slider.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\ndefine('app/range-slider', ['jquery', 'autoNumeric', 'rangeSlider'], function () {\n    'use strict';\n\n    /**\n     * @param {Object} $slider - jquery обеъект, обёртка всего блока слайдера\n     * @constructor\n     */\n\n    var RangeSlider = function () {\n        function RangeSlider($slider) {\n            _classCallCheck(this, RangeSlider);\n\n            //не инициализируем слайдер, если у него есть атрибут data-noinit=\"true\"\n            if ($slider.attr('data-noinit') === 'true') {\n                return;\n            }\n\n            //Обёртка для сладера и инупутов\n            this.$wrap = $slider;\n            // Проверяем на каком устройстве показываем слайдер\n            this.isMobile = window.innerWidth < 1025;\n            // На j-slider навешиваем iondenslider\n            this.$slider = this.$wrap.find('.j-slider');\n            // Инпуты сладера для отправки на сервер\n            this.$inputs = this.$wrap.find('input');\n            // Определяем сколько пинов надо показывать\n            this.type = this.$inputs.length === 1 ? 'single' : 'double';\n\n            this.options();\n            this.initMask();\n            this.bindEvents();\n        }\n\n        /**\n         * Настройки iondenslider\n         */\n\n\n        _createClass(RangeSlider, [{\n            key: 'options',\n            value: function options() {\n                var _this = this;\n                // Данные из data-атрибутов\n                var data = this.$slider.data();\n                // Минимальное значение\n                this.min = data.min;\n                // Максимальное значение\n                this.max = data.max;\n                // Положение левого пина\n                this.from = data.from;\n                // Положение правого пина\n                this.to = data.to;\n                //\n                this.values = [this.from, this.to];\n\n                this.options = {\n                    type: this.type,\n                    min: this.min,\n                    max: this.max,\n                    from: this.from,\n                    to: this.to,\n                    min_interval: this.mathInterval(), // eslint-disable-line camelcase\n                    decorate_both: false, // eslint-disable-line camelcase\n                    prettify_enabled: true, // eslint-disable-line camelcase\n                    onChange: function onChange(data) {\n                        _this.eventChange(data);\n                    },\n                    onStart: function onStart(data) {\n                        _this.eventStart(data);\n                    },\n                    onFinish: function onFinish() {\n                        _this.setEventInputChange();\n                    }\n                };\n\n                this.init();\n            }\n        }, {\n            key: 'bindEvents',\n\n\n            /**\n             * Подписка на события\n             */\n            value: function bindEvents() {\n                var _this = this;\n                // Change на инпутах (не работает с двумя пинами)\n                // this.$inputs.on('change', this.inputsChangesValue.bind(this));\n                // Keypress в инпуте, при enter вызывает inputsChangesValue\n                this.$inputs.on('keypress', function (e) {\n                    if (e.which === 13) {\n                        _this.inputsChangesValue(e);\n                    }\n                });\n            }\n        }, {\n            key: 'init',\n\n\n            /**\n             * Инициализация iondenslider\n             */\n            value: function init() {\n                this.$slider.ionRangeSlider(this.options);\n                this.slider = this.$slider.data('ionRangeSlider');\n            }\n        }, {\n            key: 'eventStart',\n\n\n            /**\n             * Событие срабатывает при загрузке слайдера\n             */\n            value: function eventStart() {\n                var _this = this;\n                // Выставляем всем инпутам значения - value\n                this.$inputs.each(function (index) {\n                    _this.$inputs[index].value = _this.digit(_this.values[index]);\n                });\n            }\n        }, {\n            key: 'eventChange',\n\n\n            /**\n             * Событие происходит во время изменение положения пина\n             * @param {Object} data - данные для слайдера (min, max, from, to)\n             */\n            value: function eventChange(data) {\n                this.from = data.from;\n                this.to = data.to;\n                this.$inputs[0].value = this.digit(data.from);\n                $(this.$inputs[0]).autoNumeric('set', data.from);\n\n                if (this.$inputs[1]) {\n                    $(this.$inputs[1]).autoNumeric('set', data.to);\n                    this.$inputs[1].value = this.digit(data.to);\n                }\n            }\n        }, {\n            key: 'inputsChangesValue',\n\n\n            /**\n             * Некоторое кол-во математики, которая не дает ползункам\n             * разбегаться/пересекаться\n             * @param {Event} e - Event\n             */\n            value: function inputsChangesValue(e) {\n                var data = {};\n                var value = void 0;\n\n                //TODO переписать, нихуя не понятно\n                if (this.$inputs[1] !== 'undefined') {\n                    value = parseInt(this.undigit(e.target.value, 10));\n\n                    if (value < this.min) {\n                        data.from = this.min;\n                        this.$inputs[0].value = this.digit(this.min);\n                    } else if (value > this.to) {\n                        data.from = this.to;\n                        this.$inputs[0].value = this.digit(this.to);\n                    } else {\n                        data.from = value;\n                    }\n\n                    if (value > this.max) {\n                        data.from = this.max;\n                        this.$inputs[0].value = this.digit(this.max);\n                    }\n                } else if (e.target === this.$inputs[0]) {\n                    value = parseInt(this.undigit(e.target.value, 10));\n\n                    if (value < this.min) {\n                        data.from = this.min;\n                        this.$inputs[0].value = this.digit(this.min);\n                    } else if (value > this.to - this.interval) {\n                        data.from = this.to - this.interval;\n                        this.$inputs[0].value = this.digit(this.to - this.interval);\n                    } else {\n                        data.from = value;\n                    }\n\n                    this.from = data.from;\n                } else {\n                    value = parseInt(this.undigit(e.target.value, 10));\n\n                    if (value > this.max) {\n                        data.to = this.max;\n                        this.$inputs[1].value = this.digit(this.max);\n                    } else if (value < this.from + this.interval) {\n                        data.to = this.from + this.interval;\n                        this.$inputs[1].value = this.digit(this.from + this.interval);\n                    } else {\n                        data.to = value;\n                    }\n\n                    this.to = data.to;\n                }\n\n                this.update(data);\n            }\n        }, {\n            key: 'update',\n\n\n            /**\n             * Обновление значений слайдера\n             * @param {Object} data - данные о слайдере\n             */\n            value: function update(data) {\n                this.slider.update(data);\n            }\n        }, {\n            key: 'mathInterval',\n\n\n            /**\n             * Определение интервала между пинами 0----0\n             * @return {Number} - размер интервала\n             */\n            value: function mathInterval() {\n                var sliderWidth = this.$slider.width();\n                var pinWidth = 20;\n                var medium = this.max - this.min;\n                var pxInStep = medium / sliderWidth;\n                var coefficient = this.isMobile ? 2.5 : 2;\n\n                if (pxInStep > 1) {\n                    this.interval = Math.floor(pinWidth * coefficient * pxInStep);\n                } else {\n                    var stepInPx = 1 / pxInStep;\n                    this.interval = Math.floor(pinWidth * coefficient / stepInPx);\n                }\n\n                return this.interval;\n            }\n        }, {\n            key: 'digit',\n\n\n            /**\n             * Добавление разрядов к цифрам\n             * @param {Number} number - число для конвертации\n             * @returns {String} - число с разрядами в виже строки\n             */\n            value: function digit(number) {\n                return String(number).replace(/(\\d{1,3}(?=(\\d{3})+(?:\\.\\d|\\b)))/g, '\\$1 ');\n            }\n        }, {\n            key: 'undigit',\n\n\n            /**\n             * Конвертация из числа с разрядами, обратно в число\n             * @param {String} number - Число с разрядами\n             * @return {Number} - число\n             */\n            value: function undigit(number) {\n                return number.replace(/\\s/g, '');\n            }\n        }, {\n            key: 'initMask',\n\n\n            /**\n             * Маска для разрядов 1 000 000\n             */\n            value: function initMask() {\n                this.$inputs.each(function () {\n                    $(this).autoNumeric('init', {\n                        aSep: ' ',\n                        mDec: 0\n                    });\n                });\n            }\n        }, {\n            key: 'setEventInputChange',\n\n\n            /**\n             * При отпускании пина создаем на инпутах событие change\n             * понадобится при интеграции с другими частями кода\n             */\n            value: function setEventInputChange() {\n                this.$inputs.change();\n            }\n        }]);\n\n        return RangeSlider;\n    }();\n\n    return RangeSlider;\n});"]}