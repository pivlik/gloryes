{"version":3,"sources":["app/mortgage.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","define","Mortgage","$mortgage","this","$form","find","$inputs","$ajaxLoader","$content","bindEvents","value","that","on","send","bind","e","which","$","ajax","url","attr","type","dataType","data","serialize","beforeSend","show","success","empty","append","html","hide"],"mappings":"AAAA,YAIA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,KAIhiBkB,QAAO,eAAgB,WAuEnB,MAjEe,YACX,QAASC,GAASC,GACdtB,gBAAgBuB,KAAMF,GAGtBE,KAAKC,MAAQF,EAAUG,KAAK,QAE5BF,KAAKG,QAAUJ,EAAUG,KAAK,SAE9BF,KAAKI,YAAcL,EAAUG,KAAK,kBAElCF,KAAKK,SAAWN,EAAUG,KAAK,oBAE/BF,KAAKM,aAiDT,MAzCAzB,cAAaiB,IACTL,IAAK,aACLc,MAAO,WACH,GAAIC,GAAOR,IACXA,MAAKG,QAAQM,GAAG,SAAUT,KAAKU,KAAKC,KAAKX,OAEzCA,KAAKG,QAAQM,GAAG,WAAY,SAAUG,GAElB,KAAZA,EAAEC,OACFL,EAAKE,YAKjBjB,IAAK,OAMLc,MAAO,WACH,GAAIC,GAAOR,IAEXc,GAAEC,MACEC,IAAKhB,KAAKC,MAAMgB,KAAK,UACrBC,KAAMlB,KAAKC,MAAMgB,KAAK,WAAa,OACnCE,SAAU,OACVC,KAAMpB,KAAKC,MAAMoB,YACjBC,WAAY,WACRd,EAAKJ,YAAYmB,QAErBC,QAAS,SAAiBJ,GAEtBZ,EAAKH,SAASoB,QAAQC,OAAON,EAAKO,MAElCnB,EAAKJ,YAAYwB,cAM1B9B","file":"../../app/mortgage.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\ndefine('app/mortgage', function () {\n    /**\n     * Калькулято ипотеки\n     * @param {Object} $mortgage - jQuery object\n     * @constructor\n     */\n    var Mortgage = function () {\n        function Mortgage($mortgage) {\n            _classCallCheck(this, Mortgage);\n\n            // Форма\n            this.$form = $mortgage.find('form');\n            // Все инпуты\n            this.$inputs = $mortgage.find('input');\n            // Ajax loader\n            this.$ajaxLoader = $mortgage.find('.b-ajax-loader');\n            // Контентная часть, для замены пришедшим от севера\n            this.$content = $mortgage.find('.l-mortgage__cnt');\n\n            this.bindEvents();\n        }\n\n        /**\n         * Биндинг всех событий\n         */\n\n\n        _createClass(Mortgage, [{\n            key: 'bindEvents',\n            value: function bindEvents() {\n                var that = this;\n                this.$inputs.on('change', this.send.bind(this));\n\n                this.$inputs.on('keypress', function (e) {\n                    // Если нажали enter в инпуте\n                    if (e.which === 13) {\n                        that.send();\n                    }\n                });\n            }\n        }, {\n            key: 'send',\n\n\n            /**\n             * Отправка ajax-запроса на сервер\n             */\n            value: function send() {\n                var that = this;\n\n                $.ajax({\n                    url: this.$form.attr('action'),\n                    type: this.$form.attr('method') || 'post',\n                    dataType: 'json',\n                    data: this.$form.serialize(),\n                    beforeSend: function beforeSend() {\n                        that.$ajaxLoader.show();\n                    },\n                    success: function success(data) {\n                        // Очищаем контент и заполняем пришедшим от сервера\n                        that.$content.empty().append(data.html);\n                        // Скрываем ajax loader\n                        that.$ajaxLoader.hide();\n                    }\n                });\n            }\n        }]);\n\n        return Mortgage;\n    }();\n\n    return Mortgage;\n});"]}